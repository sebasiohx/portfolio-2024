---
/** Menu items */
const textLinks: { label: string; href: string }[] = [
  { label: 'Home', href: '/' },
  { label: 'Portafolio', href: '/portfolio/' },
  { label: 'Acerca de mi', href: '/about/' },
];

/** Menu icons */
const iconsLinks: { label: string; href: string; icon: string }[] = [
  { label: 'LinkedIn', href: 'https://www.linkedin.com/in/sebastianolateh/', icon: 'fa-linkedin-square' },
  { label: 'GitHub', href: 'https://github.com/sebasiohx', icon: 'fa-github' },
  { label: 'CodePen', href: 'https://codepen.io/Solate', icon: 'fa-codepen' },
];
---

<script>
  const switchTheme: any = document.getElementById('btn-theme');
  const textSwitchTheme: any = document.querySelector('.btn-theme__text');
  const iconSwitchTheme: any = document.querySelector('.btn-theme__icon');

  /** funcion para cambiar el contenido del boton de theme */
  function toggleContentBtnTheme(theme: string) {
    textSwitchTheme.innerText = theme === 'dark' ? 'Dark' : 'Light';

    if (theme === 'dark') {
      iconSwitchTheme.classList.remove('fa-sun-o');
      iconSwitchTheme.classList.add('fa-moon-o');
    } else {
      iconSwitchTheme.classList.remove('fa-moon-o');
      iconSwitchTheme.classList.add('fa-sun-o');
    }
  }

  /** funcion para el boton de cambiar theme */
  function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    toggleContentBtnTheme(newTheme);
  }

  switchTheme.addEventListener('click', toggleTheme);

  /** funcion para guardar y cargar el tema en el local storage */
  function loadTheme() {
    const savedTheme = localStorage.getItem('theme') || 'dark';
    document.documentElement.setAttribute('data-theme', savedTheme);
    toggleContentBtnTheme(savedTheme);
  }

  loadTheme();
</script>

<nav class='navbar flex items-center gap-4 lg:gap-6' aria-label="Menú principal">
  <ul class='nav-items hidden md:flex md:gap-4 lg:gap-6'>
    {
      textLinks.map(({ label, href }) => (
        <li class='nav-items__item'>
          <span class="triangle triangle-1"></span>
          <a 
          href={href}
          class:list={['nav-items__link', {'active': Astro.url.pathname === href ||
          (href !== '/' && Astro.url.pathname.startsWith(href))}]}
          >
            {label}

            <span class="cross-decoration cross-decoration-1">+</span>
            <span class="cross-decoration cross-decoration-2">+</span>
            <span class="cross-decoration cross-decoration-3">+</span>
          </a>
          <span class="triangle triangle-2"></span>
        </li>
      ))
    }
  </ul>
  <ul class='nav-icons hidden md:flex md:gap-5 lg:gap-6'>
    {
      iconsLinks.map(({ label, href, icon }) => (
        <li class='grow'>
          <a class='nav-icons__link' href={href} title={label} target="_blank" rel="noopener noreferrer">
            <span class='sr-only'>{label}</span>
            <span class="nav-icons__corner corner-1"></span>
            <span class="nav-icons__corner corner-2"></span>
            <span class="nav-icons__bg-blink"></span>
            <i class:list={['nav-icons__icon fa fa-brands', icon]} />
          </a>
        </li>
      ))
    }
  </ul>

  <button id='btn-theme' class="btn-theme" aria-label="cambiar de color" role="switch" aria-checked="false" title="modo de color">
    <span class='btn-theme__title'>
      Color
      <i class="btn-theme__kanji">色</i>
    </span>
    <span class="btn-theme__color-content">
      <span class='btn-theme__text'></span>
      <i class='btn-theme__icon fa' aria-hidden='true'></i>
    </span>
  </button>

  <button class='menu-burguer flex md:hidden' aria-expanded="false" aria-haspopup="true" aria-controls="menu-mobile-aside">
    <div class='menu-line'></div>
    <div class='menu-line'></div>
    <div class='menu-line'></div>
  </button>
</nav>
<!-- Navbar links -->
<style lang='scss'>
  .navbar{
    .nav-items{
      &__item{
        display: grid;
        justify-items: center;
        gap: 8px;
  
        .triangle{
          visibility: hidden;
          width: 0;
          height: 0;
          border-top: solid 8px var(--color-main-3);
          border-right: solid 5px transparent;
          border-left: solid 5px transparent;
          opacity: 0.6;
          animation: blink-in 0.3s infinite cubic-bezier(1,0,0,1) forwards;

          &-2{
            transform: rotate(180deg);
          }
        }

        &:has(.nav-items__link:hover){
          .triangle{
            visibility: visible;
          }
        }
      }

      &__link{
        border-bottom: 1px solid var(--color-main-1);
        position: relative;
        padding: 8px 16px;
        display: inline-block;
        transition: 0.35s;
        text-transform: uppercase;
        font-size: var(--size-12px);
        text-shadow: var(--color-text) 0px 0px 8px;
        font-family: var(--font-family-2);

        &::after {
          content: '';
          position: absolute;
          bottom: -1px;
          -moz-right: 0px;
          right: 0px;
          display: block;
          width: 15px;
          height: 15px;
          background-color: var(--color-main-1);
          clip-path: polygon(66% 0, 100% 0, 100% 100%, 0% 100%);
          transition: opacity .3s, transform .3s cubic-bezier(.455, .03, .515, .955);
        }

        &.active{
          border-bottom: 1px solid var(--color-main-2);
          &::after{
            background-color: var(--color-main-2);
          }
        }

        .cross-decoration{
          opacity: 0;
          transition: opacity .3s, transform .3s;
          width: .5rem;
          height: .5rem;
          position: absolute;
          transform: translate(0);
          color: var(--color-main-3);
          transform: translate(0px, 0px);

          &-1{
            top: 0;
            left: 0;
          }
          &-2{
            top: 0;
            right: 0;
          }
          &-3{
            bottom: 12px;
            left: 0;
          }
        }

        &:hover{
          border-color: var(--color-main-3);
          background-color: color-mix(in srgb, var(--color-main-3) 50%, transparent 80%);
          box-shadow: var(--color-main-3) 0px 3px 10px;
          transition: 300ms;

          &::before{
            display: block;
          }

          &::after{
            background-color: var(--color-main-3);
            transition: opacity .3s, transform .3s;
          }

          .cross-decoration{
            opacity: 1;

            &-1{
              transform: translate(-6px,-12px);
            }
            &-2{
              transform: translate(2px, -12px);
            }
            &-3{
              transform: translate(-6px, 10px);
            }
          }
        }
        @media screen and (width >= 1024px){
          font-size: var(--size-14px);
        }
      }
    }
    .nav-icons{
      &__link{
        position: relative;
        font-size: var(--size-18px);
        width: 40px;
        height: 40px;
        display: grid;
        grid-template-areas: "stack";
        place-items: center;
        text-shadow: var(--color-text) 0px 0px 10px;

        &:hover{
          .nav-icons{
            &__corner{
              transition: all 250ms;

              &.corner-1{
                //transform: translate(-10px,-5px);
                border-top: 1px solid var(--color-main-3);
                border-left: 1px solid var(--color-main-3);
              }
              &.corner-2{
                //transform: translate(10px,5px);
                border-bottom: 1px solid var(--color-main-3);
                border-right: 1px solid var(--color-main-3);
              }
            }
            &__bg-blink{
              visibility: visible;
              animation: blink-in 0.3s cubic-bezier(1,0,0,1) forwards;
            }
          }
        }
      }
      :is(.nav-icons__corner, .nav-icons__bg-blink, .nav-icons__icon){
        grid-area: stack;
      }
      &__corner{
        background-color: transparent;
        width: 20px;
        height: 30px;
        transition: all 250ms;

        &.corner-1{
          position: relative;
          transform: translate(-10px,-5px);
          border-top: 1px solid var(--color-main-2);
          border-left: 1px solid var(--color-main-2);
        }
        &.corner-2{
          position: relative;
          transform: translate(10px,5px);
          border-bottom: 1px solid var(--color-main-1);
          border-right: 1px solid var(--color-main-1);
        }
      }
      &__bg-blink{
        background-color: color-mix(in srgb, var(--color-main-3) 50%, transparent 80%);
        width: 100%;
        height: 100%;
        visibility: hidden;
        z-index: -1;
      }
    }
    .btn-theme{
      position: relative;
      height: 38px;
      border: 3px solid var(--color-main-3);
      border-radius: 8px;
      padding: 1px 3px;
      color: var(--color-main-3);
      display: flex;
      justify-content: center;
      flex-direction: column;
      text-transform: uppercase;
      font-weight: bolder;
      text-align: left;
      background-color: transparent;
      box-shadow: inset var(--color-main-3) 0 0 2px;
      gap: 3px;
      cursor: pointer;
      transition: 250ms;

      &__title{
        font-size: 10px;
        border-bottom: 1px solid;
        transform: scaleY(1.3);
        display: none;
      }
      &__kanji{
        font-size: 12px;
        font-weight: bolder;
        margin-left: 4px;
      }
      &__color-content{
        font-size: var(--size-14px);
      }

      &:hover{
        box-shadow: inset var(--color-main-3) 0 0 12px;
        text-shadow: var(--color-main-3) 0 0 12px;
        transition: 250ms;

        :is(.btn-theme__title, .btn-theme__color-content){
          animation: blink-in 0.3s cubic-bezier(1,0,0,1) forwards;
        }
      }

      @media screen and (width >= 900px){
        height: 50px;

        &__title{
          display: block;
        }
      }
    }
  }
  :global([data-theme='light']) {
    .navbar{
      .nav-items{
        &__link{
          text-shadow: var(--color-main-1) 0px 1px 1px;
        }
      }
      .nav-icons{
        &__link{
          text-shadow: var(--color-main-1) 0px 1px 1px;
        }
      }
      .btn-theme{
        color: var(--color-text);
      }
    }
  }
</style>
<!-- menu burguer -->
<script>
  const iconMenu: any = document.querySelector('.menu-burguer');
  const menuMobile: any = document.getElementById('menu-mobile-aside');

  iconMenu.addEventListener(
    'click',
    () => {
      if (iconMenu.classList.contains('open')) {
        iconMenu.classList.remove('open');
        menuMobile.classList.remove('open');
      } else {
        iconMenu.classList.add('open');
        menuMobile.classList.add('open');
      }
    },
    false
  );
</script>
<style>
  .menu-burguer {
    /* all: unset; */
    /* display: flex; */
    flex-direction: column;
    justify-content: space-between;
    gap: 5px;
    cursor: pointer;
    padding: 0.5rem 1rem;
    clip-path: polygon(calc(0% + 10px) 0%, 100% 0%, 100% calc(100% - 10px), calc(100% - 10px) 100%, 0% 100%, 0% calc(0% + 10px));
    background-color: var(--color-main-1);
  }

  .menu-line {
    height: 4px;
    width: 24px;
    background-color: var(--color-bg);
    transition: all 250ms cubic-bezier(0.18, 0.89, 0.32, 1.28);
  }

  .menu-line:first-child {
    animation: firstLinetoClose 240ms cubic-bezier(0.23, 0.95, 0.58, 1.37);
  }

  .open .menu-line:first-child {
    animation: firstLinetoOpen 240ms cubic-bezier(0.23, 0.95, 0.58, 1.37);
    animation-fill-mode: forwards;
  }

  @keyframes firstLinetoOpen {
    0% {
      transform: translateY(0);
    }

    50% {
      transform: translateY(12px);
    }

    100% {
      transform: translateY(9px) rotate(45deg);
    }
  }

  @keyframes firstLinetoClose {
    0% {
      transform: translateY(9px) rotate(0);
    }

    100% {
      transform: translateY(0);
    }
  }

  .open .menu-line:nth-child(2) {
    opacity: 0;
  }

  .menu-line:last-child {
    animation: lastLinetoClose 240ms cubic-bezier(0.23, 0.95, 0.58, 1.37);
  }

  .open .menu-line:last-child {
    animation: lastLinetoOpen 240ms cubic-bezier(0.23, 0.95, 0.58, 1.37);
    animation-fill-mode: forwards;
  }

  @keyframes lastLinetoOpen {
    0% {
      transform: translateY(0);
    }

    50% {
      transform: translateY(-12px);
    }

    100% {
      transform: translateY(-10px) rotate(-45deg);
    }
  }

  @keyframes lastLinetoClose {
    0% {
      transform: translateY(-10px);
    }

    100% {
      transform: translateY(0);
    }
  }
</style>
<!-- aside menu mobile -->
<aside id='menu-mobile-aside' class='menu-mobile'>
  <div class='container mx-auto p-4'>
    <h3 class='menu-mobile__title'>Menú</h3>
    <nav class='menu-mobile__nav mb-8' aria-labelledby="menu-mobile-aside">
      {
        textLinks.map(({ label, href }) => (
          <a
            class:list={[
              'menu-mobile__link',
              {
                active:
                  Astro.url.pathname === href ||
                  (href !== '/' && Astro.url.pathname.startsWith(href)),
              },
            ]}
            href={href}
          >
            {label}
          </a>
        ))
      }
    </nav>
    <ul class='flex gap-8 justify-between'>
      {
        iconsLinks.map(({ label, href, icon }) => (
          <li class='grow'>
            <a class='menu-mobile__link-icon' href={href} target="_blank" rel="noopener noreferrer">
              <span class='sr-only'>{label}</span>
              <i class:list={['fa', 'fa-brands', icon]} />
            </a>
          </li>
        ))
      }
    </ul>
    <svg
      version='1.1'
      id='Layer_1'
      class='menu-mobile__svg'
      xmlns='http://www.w3.org/2000/svg'
      xmlns:xlink='http://www.w3.org/1999/xlink'
      x='0px'
      y='0px'
      viewBox='0 0 100 100'
      enable-background='new 0 0 100 100'
      xml:space='preserve'
    >
      <rect
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 3 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'></animate>
      </rect>
      <rect
        x='17'
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 20 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'
          begin='0.1s'></animate>
      </rect>
      <rect
        x='40'
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 40 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'
          begin='0.3s'></animate>
      </rect>
      <rect
        x='60'
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 58 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'
          begin='0.5s'></animate>
      </rect>
      <rect
        x='80'
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 76 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'
          begin='0.1s'></animate>
      </rect>
    </svg>
  </div>
</aside>
<style lang='scss'>
  .menu-mobile {
    position: absolute;
    inset: 82px 0 0 0;
    z-index: 11;
    height: calc(100vh - 82px);
    width: 100%;
    clip-path: polygon(0 38px, 6px 38px, 20px 18px, calc(0% + 105px) calc(0% + 18px), calc(0% + 130px) 0px, 100% 0px, 100% 100%, 0px 100%);
    transform: translateX(100%);
    transition: all 250ms;
    background-color: color-mix(in srgb, var(--color-bg) 30%, transparent 100%);
    /* Glassmorphism */
    -webkit-backdrop-filter: blur(30px);
    backdrop-filter: blur(30px);

    &.open {
      transform: translateX(0%);
    }

    &__title {
      text-align: right;
      font-size: var(--size-24px);
      font-weight: bold;
      padding-right: 18px;
      margin-bottom: 32px;
      text-transform: uppercase;
      font-family: var(--font-family-1);
      transform: scaleY(1.2);
      text-shadow: var(--color-main-1) 1px 0px 4px;
    }

    &__nav {
      display: flex;
      flex-direction: column;
    }

    &__link {
      text-align: right;
      padding: 20px;
      border-bottom: 2px solid var(--color-main-1);
      position: relative;
      font-size: var(--size-16px);
      text-transform: uppercase;
      font-family: var(--font-family-2);

      &::after {
        content: '';
        position: absolute;
        bottom: 0;
        right: 0;
        display: block;
        width: 15px;
        height: 15px;
        background-color: var(--color-main-1);
        clip-path: polygon(66% 0, 100% 0, 100% 100%, 0% 100%);
      }

      &.active {
        background-color: color-mix(
          in srgb,
          var(--color-main-2) 20%,
          transparent 100%
        );
        border-bottom-color: var(--color-main-2);
        box-shadow: var(--color-main-2) 1px 0px 1px;

        &::after {
          background-color: var(--color-main-2);
        }
      }
    }

    &__link-icon {
      display: block;
      text-align: center;
      font-size: var(--size-26px);
      height: 50px;
      align-content: center;
      border-top: 2px solid var(--color-main-2);
      border-left: 2px solid var(--color-main-2);
      border-right: 2px solid var(--color-main-1);
      border-bottom: 2px solid var(--color-main-1);
    }
    &__svg {
      width: 90px;
      position: fixed;
      bottom: 16px;
      right: 16px;
      opacity: 0.5;
    }
  }

  .fill-color {
    fill: var(--color-main-1);
  }

  :global([data-theme='light']) {
    .menu-mobile__title {
      text-shadow: var(--color-main-1) 1px 0px 2px;
    }
  }
</style>
